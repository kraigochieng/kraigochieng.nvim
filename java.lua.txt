local jdtls_dir = vim.fn.stdpath("data") .. "/mason/packages/jdtls"
local config_dir = jdtls_dir .. "/config_linux"
local plugins_dir = jdtls_dir .. "/plugins"
-- Check inside your directory to see what yoou are referencing actually exists
local eclipse_jar = plugins_dir .. "/org.eclipse.equinox.launcher_1.6.500.v20230717-2134.jar"
local lombok_jar = jdtls_dir .. "/lombok.jar"
local jdk_dir = "/home/kraigochieng/.sdkman/candidates/java/current"
local jdk_bin = jdk_dir .. "/bin/java"

local root_markers = {".git", "mvnw", "gradlew", "pom.xml", "build.gradle"}
local root_dir = require("jdtls.setup").find_root(root_markers)
if root_dir == "" then
    return
end

-- This creates a workspace directory for every project you make
local project_name = vim.fn.fnamemodify(vim.fn.getcwd(), ":p:h:t")
local workspaces_dir = vim.fn.stdpath("data") .. "/site/workspaces/"
local workspace_dir = workspaces_dir .. project_name

function directory_exists(path)
    local ok, err, code = os.rename(path, path)
    if not ok then
        if code == 13 then
            -- Permission denied, but directory exists
            return true
        end
        if code == 2 then
            -- File or directory does not exist
            return false
        end
    end
    return true
end

-- Check if the directory exists
if not directory_exists(workspace_dir) then
    -- If it doesn't exist, create it
    os.execute("mkdir " .. workspace_dir)
else
    print("Directory already exists.")
end

-- os.execute("mkdir " .. workspace_dir)

local config = {
    cmd = {
        -- This references the current java version managed by SDKMAN!
        -- If you are going to use this in another setup, change the name properly
        jdk_bin,
        "-Declipse.application=org.eclipse.jdt.ls.core.id1",
        "-Dosgi.bundles.defaultStartLevel=4",
        "-Declipse.product=org.eclipse.jdt.ls.core.product",
        "-Dlog.protocol=true",
        "-Dlog.level=ALL",
        "-javaagent:" .. lombok_jar,
        "-Xmx1G",
        "--add-modules=ALL-SYSTEM",
        "--add-opens", "java.base/java.util=ALL-UNNAMED",
        "--add-opens", "java.base/java.lang=ALL-UNNAMED",
        "-jar", eclipse_jar,
        "-configuration", config_dir,
        "-data", workspace_dir,
    },

    root_dir = root_dir,

    settings = {
        java = {
            home = jdk_dir,
            eclipse = {
                downloadSources = true,
            },
            configuration = {
                updateBuildConfiguration = "interactive",
                runtimes = {
                    path = jdk_dir
                }
            },
            maven = {
                downloadSources = true,
            },
            implementationsCodeLens = {
                enabled = true,
            },
            referencesCodeLens = {
                enabled = true,
            },
            references = {
                includeDecompliedSources = true,
            },
            format = {
                enabled = true,
                settings = {
                    -- This file must be copied from the internet and referenced properly by the user
                    url = vim.fn.stdpath"config" .. "/lang-servers/eclipse-java-google-style.xml",
                    profile = "GoogleStyle"
                },
            },
            signatureHelp = { enabled = true },
            completion = {
                favoriteStaticMembers = {
                    "org.hamcrest.MatcherAssert.assertThat",
                    "org.hamcrest.Matchers.*",
                    "org.hamcrest.CoreMatchers.*",
                    "org.junit.jupiter.api.Assertions.*",
                    "java.util.Objects.requireNonNull",
                    "java.util.Objects.requireNonNullElse",
                    "org.mockito.Mockito.*",
                },
                importOrder = {
                    "java",
                    "javax",
                    "com",
                    "org"
                },
            },
            extendedClientCapabilities = extendedClientCapabilities,
            sources = {
                organizeImports = {
                    starThreshold = 9999,
                    staticStarThreshold = 9999,
                },
            },
            codeGeneration = {
                toString = {
                    template = "${object.className}{${member.name()}=${member.value}, ${otherMembers}}",
                },
                useBlocks = true,
            },
        },

        flags = {
            allow_incremental_sync = true,
        },
        init_options = {
            bundles = {},
        },

    }
}

--[[ config['on_attach'] = function(client, bufnr) ]]
  -- require'keymaps'.map_java_keys(bufnr);
  -- require "lsp_signature".on_attach({
  --   bind = true, -- This is mandatory, otherwise border config won't get registered.
  --   floating_window_above_cur_line = false,
  --   padding = '',
  --   handler_opts = {
  --     border = "rounded"
  --   }
  -- }, bufnr)
--[[ end ]]

-- This starts a new client & server,
-- or attaches to an existing client & server depending on the `root_dir`.
require('jdtls').start_or_attach(config)

